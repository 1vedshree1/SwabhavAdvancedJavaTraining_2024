package com.techlabs.batch.config;

import javax.sql.DataSource;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.database.JdbcCursorItemReader;
import org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder;
import org.springframework.batch.item.file.FlatFileItemWriter;
import org.springframework.batch.item.file.builder.FlatFileItemWriterBuilder;
import org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor;
import org.springframework.batch.item.file.transform.DelimitedLineAggregator;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

import com.techlabs.batch.entity.Employee;

@Configuration
public class EmployeeBatchConfig {

    @Bean
    @Qualifier("exportUserJob")
    public Job exportUserJob(JobRepository jobRepository, Step step1) {
        return new JobBuilder("exportUserJob", jobRepository)
                .start(step1)
                .build();
    }

    @Bean
    @Qualifier("importUserJob")
    public Job importUserJob(JobRepository jobRepository, Step step1, JobCompletionNotificationListner listener) {
        return new JobBuilder("importUserJob", jobRepository)
                .listener(listener)
                .start(step1)
                .build();
    }

    @Bean
    public JdbcCursorItemReader<Employee> reader(DataSource dataSource) {
        return new JdbcCursorItemReaderBuilder<Employee>()
                .dataSource(dataSource)
                .name("employeeItemReader")
                .sql("SELECT employee_id, name, salary FROM employees")
                .rowMapper((rs, rowNum) -> {
                    Employee employee = new Employee();
                    employee.setEmployeeId(rs.getInt("employee_id"));
                    employee.setName(rs.getString("name"));
                    employee.setSalary(rs.getDouble("salary"));
                    return employee;
                })
                .build();
    }

    @Bean
    public FlatFileItemWriter<Employee> writer() {
        BeanWrapperFieldExtractor<Employee> fieldExtractor = new BeanWrapperFieldExtractor<>();
        fieldExtractor.setNames(new String[] {"employeeId", "name", "salary"});
        
        DelimitedLineAggregator<Employee> lineAggregator = new DelimitedLineAggregator<>();
        lineAggregator.setDelimiter(",");
        lineAggregator.setFieldExtractor(fieldExtractor);
        
        return new FlatFileItemWriterBuilder<Employee>()
                .name("employeeItemWriter")
                .resource(new FileSystemResource("output/employee.csv"))
                .lineAggregator(lineAggregator)
                .build();
    }

    @Bean
    public Step step1(JobRepository jobRepository, FlatFileItemWriter<Employee> writer, JdbcCursorItemReader<Employee> reader) {
        return new StepBuilder("exportEmployee", jobRepository)
                .<Employee, Employee>chunk(10)
                .reader(reader)
                .writer(writer)
                .build();
    }

    @Bean
    public DataSourceTransactionManager transactionManager(DataSource data) {
        return new DataSourceTransactionManager(data);
    }
}
