package com.techlabs.bank.service;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.techlabs.bank.entity.Account;
import com.techlabs.bank.entity.Transaction;
import com.techlabs.bank.entity.TransactionType;
import com.techlabs.bank.repository.AccountRepository;
import com.techlabs.bank.repository.TransactionRepository;

@Service
public class TransactionServiceImpl implements TransactionService {
    
    @Autowired
    private TransactionRepository transactionRepo;
    @Autowired
    private AccountRepository accountRepo;

    @Transactional
    @Override
    public void addTransaction(String transactionType, double amount, Long transferAccountNumber, Long accountNumber) {
        Account account = accountRepo.findByAccountNumber(accountNumber)
                .orElseThrow(() -> new IllegalArgumentException("Account not found"));

        switch (transactionType.toUpperCase()) {
            case "DEBIT":
                debit(account, amount);
                break;
            case "CREDIT":
                credit(account, amount);
                break;
            case "TRANSFER":
                if (transferAccountNumber == null) {
                    throw new IllegalArgumentException("Transfer account number must be provided for transfers");
                }
                Account transferAccount = accountRepo.findByAccountNumber(transferAccountNumber)
                        .orElseThrow(() -> new IllegalArgumentException("Transfer account not found"));
                transfer(account, transferAccount, amount);
                break;
            default:
                throw new IllegalArgumentException("Invalid transaction type");
        }
    }

    private void debit(Account account, double amount) {
        if (account.getBalance() < amount) {
            throw new IllegalArgumentException("Insufficient funds");
        }
        account.setBalance(account.getBalance() - amount);
        accountRepo.save(account);

        Transaction transaction = new Transaction();
        transaction.setAccount(account);
        transaction.setTransactionType(TransactionType.DEBIT);
        transaction.setAmount(amount);
        transaction.setDate(new Date());

        transactionRepo.save(transaction);
    }

    private void credit(Account account, double amount) {
        account.setBalance(account.getBalance() + amount);
        accountRepo.save(account);

        Transaction transaction = new Transaction();
        transaction.setAccount(account);
        transaction.setTransactionType(TransactionType.CREDIT);
        transaction.setAmount(amount);
        transaction.setDate(new Date());

        transactionRepo.save(transaction);
    }

    private void transfer(Account fromAccount, Account toAccount, double amount) {
        if (fromAccount.getBalance() < amount) {
            throw new IllegalArgumentException("Insufficient funds");
        }

        fromAccount.setBalance(fromAccount.getBalance() - amount);
        accountRepo.save(fromAccount);

        toAccount.setBalance(toAccount.getBalance() + amount);
        accountRepo.save(toAccount);

        Transaction debitTransaction = new Transaction();
        debitTransaction.setAccount(fromAccount);
        debitTransaction.setTransactionType(TransactionType.DEBIT);
        debitTransaction.setAmount(amount);
        debitTransaction.setDate(new Date());

        transactionRepo.save(debitTransaction);

        Transaction creditTransaction = new Transaction();
        creditTransaction.setAccount(toAccount);
        creditTransaction.setTransactionType(TransactionType.CREDIT);
        creditTransaction.setAmount(amount);
        creditTransaction.setDate(new Date());

        transactionRepo.save(creditTransaction);
    }
}
